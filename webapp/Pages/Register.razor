@page "/register"
@using webapp.Data;
@inject IdentityService identityService;
@inject NavigationManager navigationManager;

<div class="pt-flex">
    <div class="col-md-6 pt-bg pt-bg-register-2">
        <div class="pt-flex pt-top-100">
            <div class="col-md-3"></div>
            <div class="col-md-6 text-center">
                <p class="pt-text-medium pt-text-box pt-white">Register</p>
                <form>
                <div class="form-group">
                    <input type="text" class="form-control text-center mt-3" id="name" placeholder="Your First and Last Name" @bind="username">
                    <input type="email" class="form-control text-center mt-3" id="email" placeholder="Your Email" @bind="email">
                    <input type="password" class="form-control text-center mt-3" id="password" placeholder="Password" @bind="password">
                    <input type="password" class="form-control text-center mt-3" id="confirm" placeholder="Confirm Password" @bind="confirmPassword">
                    <p class="pt-red pt-text-mini">@errorText</p>
                    <button type="button" class="btn pt-btn-primary pt-white mt-5" @onclick="onGetStartedClick">Get Started</button>
                </div>
                </form>
                    <span class="pt-white pt-text-small pt-text-box mt-5">Already have an account? <a href="/login">Log in</a></span>
            </div>
            <div class="col-md-3"></div>
        </div>
    </div>
    <div class="col-md-6 pt-bg pt-bg-register"></div>
</div>

@code {
    private string username;
    private string email;
    private string password;
    private string confirmPassword;
    private string errorText = "";

    private async void onGetStartedClick()
    {
        if (password != confirmPassword)
        {
            Error("Passwords don't match");
            return;
        }

        if (password.Length < 10)
        {
            Error("Password too short. Try at least 10 characters.");
            return;
        }

        var profile = new DTO.Profile() {
            ProfileId = "",
            Name = username,
            Email = email,
            ProfilePhoto = "",
            Bio = "",
            JoinedOn = DateTime.Now
        };
        var authenticated = await identityService.CreateAccountAsync(profile, email, IdentityService.HashPassword(password, email));

        if (authenticated)
        {
            navigationManager.NavigateTo("me");
        }
        else
        {
            Error("Unable to register user.");
        }
    }

    private void Error(string message)
    {
        errorText = message;
        password = "";
        confirmPassword = "";
    }
}